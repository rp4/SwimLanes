{"version":3,"file":"index-legacy-7wYCpIq9.js","sources":["../../src/core/utils/parser.js","../../src/components/diagram/SwimLane.js","../../src/lib/export/exporter.js","../../src/components/editor/Editor.js","../../src/components/controls/Controls.js","../../src/core/services/KeyboardManager.js","../../src/core/services/UrlParamsHandler.js","../../src/app.js"],"sourcesContent":["export class ProcessParser {\n    constructor() {\n        this.defaultNodeTypes = ['start', 'process', 'decision', 'end'];\n        this.nodeIcons = {\n            start: '🏁',\n            process: '🏊',\n            decision: '🤿',\n            end: '🏆'\n        };\n    }\n\n    validateJSON(jsonData) {\n        const errors = [];\n        \n        if (!jsonData) {\n            errors.push('JSON data is empty');\n            return { valid: false, errors };\n        }\n\n        if (!jsonData.lanes || !Array.isArray(jsonData.lanes)) {\n            errors.push('JSON must contain a \"lanes\" array');\n        } else {\n            jsonData.lanes.forEach((lane, index) => {\n                if (!lane.id) {\n                    errors.push(`Lane at index ${index} missing \"id\" property`);\n                }\n                if (!lane.name) {\n                    errors.push(`Lane at index ${index} missing \"name\" property`);\n                }\n                if (lane.nodes && !Array.isArray(lane.nodes)) {\n                    errors.push(`Lane \"${lane.name || index}\" has invalid \"nodes\" property`);\n                } else if (lane.nodes) {\n                    lane.nodes.forEach((node, nodeIndex) => {\n                        if (!node.id) {\n                            errors.push(`Node at index ${nodeIndex} in lane \"${lane.name || index}\" missing \"id\" property`);\n                        }\n                        if (!node.text) {\n                            errors.push(`Node at index ${nodeIndex} in lane \"${lane.name || index}\" missing \"text\" property`);\n                        }\n                    });\n                }\n            });\n        }\n\n        if (jsonData.connections && !Array.isArray(jsonData.connections)) {\n            errors.push('Connections must be an array');\n        } else if (jsonData.connections) {\n            jsonData.connections.forEach((conn, index) => {\n                if (!conn.from) {\n                    errors.push(`Connection at index ${index} missing \"from\" property`);\n                }\n                if (!conn.to) {\n                    errors.push(`Connection at index ${index} missing \"to\" property`);\n                }\n            });\n        }\n\n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n\n    parseProcess(jsonData) {\n        const validation = this.validateJSON(jsonData);\n        if (!validation.valid) {\n            throw new Error('Invalid JSON: ' + validation.errors.join(', '));\n        }\n\n        const process = {\n            title: jsonData.title || 'Untitled Process',\n            lanes: [],\n            connections: jsonData.connections || [],\n            metadata: jsonData.metadata || {}\n        };\n\n        jsonData.lanes.forEach((lane, laneIndex) => {\n            const parsedLane = {\n                id: lane.id || `lane_${laneIndex}`,\n                name: lane.name || `Lane ${laneIndex + 1}`,\n                color: lane.color || this.generateLaneColor(laneIndex),\n                nodes: [],\n                position: lane.position || { y: laneIndex * 150 + 50 },\n                height: lane.height || 140\n            };\n\n            if (lane.nodes) {\n                lane.nodes.forEach((node, nodeIndex) => {\n                    parsedLane.nodes.push(this.parseNode(node, nodeIndex, laneIndex));\n                });\n            }\n\n            process.lanes.push(parsedLane);\n        });\n\n        return process;\n    }\n\n    parseNode(node, nodeIndex, laneIndex) {\n        const defaultPosition = {\n            x: nodeIndex * 200 + 150,\n            y: laneIndex * 150 + 100\n        };\n\n        return {\n            id: node.id || `node_${laneIndex}_${nodeIndex}`,\n            text: node.text || 'Node',\n            type: node.type || 'process',\n            position: node.position || defaultPosition,\n            color: node.color || this.getNodeColor(node.type),\n            icon: this.nodeIcons[node.type] || '🏊',\n            metadata: node.metadata || {}\n        };\n    }\n\n    generateLaneColor(index) {\n        const colors = [\n            '#64b5f6',\n            '#4fc3f7', \n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1'\n        ];\n        return colors[index % colors.length];\n    }\n\n    getNodeColor(type) {\n        const colors = {\n            start: '#4caf50',\n            process: '#2196f3',\n            decision: '#ff9800',\n            end: '#f44336'\n        };\n        return colors[type] || '#2196f3';\n    }\n\n    loadFromFile(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            \n            reader.onload = (e) => {\n                try {\n                    const jsonData = JSON.parse(e.target.result);\n                    const processData = this.parseProcess(jsonData);\n                    resolve(processData);\n                } catch (error) {\n                    reject(new Error('Failed to parse JSON: ' + error.message));\n                }\n            };\n\n            reader.onerror = () => {\n                reject(new Error('Failed to read file'));\n            };\n\n            reader.readAsText(file);\n        });\n    }\n\n    generateSampleProcess() {\n        return {\n            title: 'Sample Swimming Pool Maintenance Process',\n            lanes: [\n                {\n                    id: 'lane_1',\n                    name: 'Pool Owner',\n                    color: '#64b5f6',\n                    nodes: [\n                        {\n                            id: 'node_1',\n                            text: 'Notice Pool Issues',\n                            type: 'start',\n                            position: { x: 100, y: 50 }\n                        },\n                        {\n                            id: 'node_2',\n                            text: 'Submit Request',\n                            type: 'process',\n                            position: { x: 300, y: 50 }\n                        },\n                        {\n                            id: 'node_7',\n                            text: 'Approve Work',\n                            type: 'decision',\n                            position: { x: 700, y: 50 }\n                        }\n                    ]\n                },\n                {\n                    id: 'lane_2',\n                    name: 'Pool Service',\n                    color: '#4fc3f7',\n                    nodes: [\n                        {\n                            id: 'node_3',\n                            text: 'Receive Request',\n                            type: 'process',\n                            position: { x: 300, y: 200 }\n                        },\n                        {\n                            id: 'node_4',\n                            text: 'Inspect Pool',\n                            type: 'process',\n                            position: { x: 500, y: 200 }\n                        },\n                        {\n                            id: 'node_5',\n                            text: 'Perform Service',\n                            type: 'process',\n                            position: { x: 700, y: 200 }\n                        }\n                    ]\n                },\n                {\n                    id: 'lane_3',\n                    name: 'Quality Check',\n                    color: '#29b6f6',\n                    nodes: [\n                        {\n                            id: 'node_6',\n                            text: 'Test Water Quality',\n                            type: 'process',\n                            position: { x: 900, y: 350 }\n                        },\n                        {\n                            id: 'node_8',\n                            text: 'Complete',\n                            type: 'end',\n                            position: { x: 1100, y: 350 }\n                        }\n                    ]\n                }\n            ],\n            connections: [\n                { from: 'node_1', to: 'node_2', label: 'Report' },\n                { from: 'node_2', to: 'node_3', label: 'Request' },\n                { from: 'node_3', to: 'node_4', label: 'Schedule' },\n                { from: 'node_4', to: 'node_5', label: 'Issues Found' },\n                { from: 'node_5', to: 'node_7', label: 'Review' },\n                { from: 'node_7', to: 'node_6', label: 'Approved' },\n                { from: 'node_6', to: 'node_8', label: 'Pass' }\n            ]\n        };\n    }\n}\n\nwindow.ProcessParser = ProcessParser;","export class SwimLaneRenderer {\n    constructor(svgElement) {\n        this.svg = svgElement;\n        this.swimlanesGroup = this.svg.querySelector('#swimlanes');\n        this.nodesGroup = this.svg.querySelector('#nodes');\n        this.connectionsGroup = this.svg.querySelector('#connections');\n        this.scale = 1;\n        this.translateX = 0;\n        this.translateY = 0;\n        this.processData = null;\n        this.selectedNode = null;\n        this.selectedLane = null;\n        \n        this.setupArrowMarker();\n    }\n\n    setupArrowMarker() {\n        const defs = this.svg.querySelector('defs');\n        const marker = document.createElementNS('http://www.w3.org/2000/svg', 'marker');\n        marker.setAttribute('id', 'arrowhead');\n        marker.setAttribute('markerWidth', '10');\n        marker.setAttribute('markerHeight', '10');\n        marker.setAttribute('refX', '9');\n        marker.setAttribute('refY', '3');\n        marker.setAttribute('orient', 'auto');\n        \n        const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n        polygon.setAttribute('points', '0 0, 10 3, 0 6');\n        polygon.setAttribute('fill', '#1565c0');\n        \n        marker.appendChild(polygon);\n        defs.appendChild(marker);\n    }\n    \n    createLaneRope(laneGroup, yPosition) {\n        const ropeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        \n        // Create rope floats\n        for (let x = 20; x <= 1420; x += 20) {\n            const float = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n            float.setAttribute('cx', x);\n            float.setAttribute('cy', yPosition);\n            float.setAttribute('r', '6');\n            \n            // Alternate colors for rope floats\n            if ((x / 20) % 3 === 0) {\n                float.classList.add('lane-rope-blue');\n            } else if ((x / 20) % 3 === 1) {\n                float.classList.add('lane-rope');\n            } else {\n                float.classList.add('lane-rope-yellow');\n            }\n            \n            ropeGroup.appendChild(float);\n        }\n        \n        // Add connecting line\n        const ropeLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        ropeLine.setAttribute('x1', '20');\n        ropeLine.setAttribute('y1', yPosition);\n        ropeLine.setAttribute('x2', '1420');\n        ropeLine.setAttribute('y2', yPosition);\n        ropeLine.classList.add('lane-divider');\n        ropeGroup.appendChild(ropeLine);\n        \n        laneGroup.appendChild(ropeGroup);\n    }\n    \n    addDepthMarkers() {\n        const depths = ['3FT', '5FT', '8FT', '12FT'];\n        const positions = [200, 500, 900, 1300];\n        \n        depths.forEach((depth, index) => {\n            const marker = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            marker.setAttribute('x', positions[index]);\n            marker.setAttribute('y', '25');\n            marker.classList.add('depth-marker');\n            marker.textContent = depth;\n            this.swimlanesGroup.appendChild(marker);\n        });\n    }\n\n    render(processData) {\n        this.processData = processData;\n        this.clear();\n        this.renderSwimLanes();\n        this.renderNodes();\n        this.renderConnections();\n        this.fitToScreen();\n    }\n\n    clear() {\n        this.swimlanesGroup.innerHTML = '';\n        this.nodesGroup.innerHTML = '';\n        this.connectionsGroup.innerHTML = '';\n    }\n\n    renderSwimLanes() {\n        let currentY = 50;\n        \n        // Add pool edge at the top\n        const poolEdge = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        poolEdge.setAttribute('x', '10');\n        poolEdge.setAttribute('y', '30');\n        poolEdge.setAttribute('width', '1420');\n        poolEdge.setAttribute('height', '10');\n        poolEdge.classList.add('pool-edge');\n        poolEdge.style.fill = '#e0e0e0';\n        this.swimlanesGroup.appendChild(poolEdge);\n        \n        // Add depth markers\n        this.addDepthMarkers();\n        \n        this.processData.lanes.forEach((lane, index) => {\n            const laneGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n            laneGroup.setAttribute('data-lane-id', lane.id);\n            laneGroup.classList.add('lane-group');\n            \n            // Add water effect background for each lane\n            const waterRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            waterRect.setAttribute('x', '20');\n            waterRect.setAttribute('y', currentY);\n            waterRect.setAttribute('width', '1400');\n            waterRect.setAttribute('height', lane.height || 140);\n            waterRect.setAttribute('rx', '2');\n            waterRect.setAttribute('ry', '2');\n            waterRect.style.fill = 'url(#waterGradient)';\n            waterRect.style.opacity = '0.3';\n            waterRect.classList.add('water-flow');\n            laneGroup.appendChild(waterRect);\n            \n            const laneRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            laneRect.setAttribute('x', '20');\n            laneRect.setAttribute('y', currentY);\n            laneRect.setAttribute('width', '1400');\n            laneRect.setAttribute('height', lane.height || 140);\n            laneRect.setAttribute('rx', '2');\n            laneRect.setAttribute('ry', '2');\n            laneRect.classList.add('swimlane');\n            laneRect.style.fill = lane.color + '20';\n            laneRect.style.stroke = lane.color;\n            laneRect.style.filter = 'url(#poolReflection)';\n            \n            // Add starting block\n            const startBlock = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            startBlock.setAttribute('x', '5');\n            startBlock.setAttribute('y', currentY + (lane.height || 140) / 2 - 20);\n            startBlock.setAttribute('width', '15');\n            startBlock.setAttribute('height', '40');\n            startBlock.classList.add('starting-block');\n            laneGroup.appendChild(startBlock);\n            \n            const blockNumber = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            blockNumber.setAttribute('x', '12');\n            blockNumber.setAttribute('y', currentY + (lane.height || 140) / 2 + 5);\n            blockNumber.classList.add('starting-block-number');\n            blockNumber.textContent = index + 1;\n            laneGroup.appendChild(blockNumber);\n            \n            const laneLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            laneLabel.setAttribute('x', '40');\n            laneLabel.setAttribute('y', currentY + 30);\n            laneLabel.classList.add('lane-label');\n            laneLabel.textContent = lane.name;\n            \n            if (index > 0) {\n                // Create floating lane rope divider\n                this.createLaneRope(laneGroup, currentY - 5);\n            }\n            \n            const resizeHandle = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            resizeHandle.setAttribute('x', '1415');\n            resizeHandle.setAttribute('y', currentY + (lane.height || 140) / 2 - 20);\n            resizeHandle.setAttribute('width', '10');\n            resizeHandle.setAttribute('height', '40');\n            resizeHandle.classList.add('resize-handle');\n            resizeHandle.setAttribute('data-lane-id', lane.id);\n            \n            laneGroup.appendChild(laneRect);\n            laneGroup.appendChild(laneLabel);\n            laneGroup.appendChild(resizeHandle);\n            \n            this.swimlanesGroup.appendChild(laneGroup);\n            \n            lane.y = currentY;\n            currentY += (lane.height || 140) + 10;\n        });\n        \n        // Add pool edge at the bottom\n        const poolEdgeBottom = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        poolEdgeBottom.setAttribute('x', '10');\n        poolEdgeBottom.setAttribute('y', currentY);\n        poolEdgeBottom.setAttribute('width', '1420');\n        poolEdgeBottom.setAttribute('height', '10');\n        poolEdgeBottom.classList.add('pool-edge');\n        poolEdgeBottom.style.fill = '#e0e0e0';\n        this.swimlanesGroup.appendChild(poolEdgeBottom);\n        \n        this.svg.setAttribute('viewBox', `0 0 1440 ${currentY + 50}`);\n    }\n\n    renderNodes() {\n        this.processData.lanes.forEach(lane => {\n            lane.nodes.forEach(node => {\n                const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                nodeGroup.setAttribute('data-node-id', node.id);\n                nodeGroup.setAttribute('data-lane-id', lane.id);\n                nodeGroup.classList.add('process-node');\n                nodeGroup.style.cursor = 'move';\n                \n                let nodeShape;\n                const x = node.position.x;\n                const y = lane.y + 70;\n                \n                node.position.y = y;\n                \n                switch(node.type) {\n                    case 'start':\n                    case 'end':\n                        nodeShape = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n                        nodeShape.setAttribute('cx', x);\n                        nodeShape.setAttribute('cy', y);\n                        nodeShape.setAttribute('r', '35');\n                        break;\n                    case 'decision':\n                        nodeShape = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n                        const points = `${x},${y-35} ${x+35},${y} ${x},${y+35} ${x-35},${y}`;\n                        nodeShape.setAttribute('points', points);\n                        break;\n                    default:\n                        nodeShape = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n                        nodeShape.setAttribute('x', x - 50);\n                        nodeShape.setAttribute('y', y - 25);\n                        nodeShape.setAttribute('width', '100');\n                        nodeShape.setAttribute('height', '50');\n                        nodeShape.setAttribute('rx', '25');\n                        nodeShape.setAttribute('ry', '25');\n                        break;\n                }\n                \n                nodeShape.classList.add(`node-${node.type}`);\n                nodeShape.style.fill = node.color || this.getNodeColor(node.type);\n                nodeShape.style.stroke = 'white';\n                nodeShape.style.strokeWidth = '2';\n                \n                const nodeIcon = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                nodeIcon.setAttribute('x', x);\n                nodeIcon.setAttribute('y', y - 10);\n                nodeIcon.classList.add('node-text');\n                nodeIcon.style.fontSize = '20px';\n                nodeIcon.textContent = node.icon;\n                \n                const nodeText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                nodeText.setAttribute('x', x);\n                nodeText.setAttribute('y', y + 10);\n                nodeText.classList.add('node-text');\n                nodeText.style.fontSize = '12px';\n                nodeText.textContent = node.text;\n                \n                nodeGroup.appendChild(nodeShape);\n                nodeGroup.appendChild(nodeIcon);\n                nodeGroup.appendChild(nodeText);\n                \n                this.nodesGroup.appendChild(nodeGroup);\n            });\n        });\n    }\n\n    renderConnections() {\n        this.processData.connections.forEach(conn => {\n            const fromNode = this.findNode(conn.from);\n            const toNode = this.findNode(conn.to);\n            \n            if (fromNode && toNode) {\n                const path = this.calculatePath(fromNode, toNode);\n                \n                const connectionPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                connectionPath.setAttribute('d', path);\n                connectionPath.classList.add('connection-line');\n                connectionPath.setAttribute('marker-end', 'url(#arrowhead)');\n                connectionPath.setAttribute('data-from', conn.from);\n                connectionPath.setAttribute('data-to', conn.to);\n                \n                if (conn.label) {\n                    const midPoint = this.getPathMidpoint(fromNode, toNode);\n                    const label = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                    label.setAttribute('x', midPoint.x);\n                    label.setAttribute('y', midPoint.y - 5);\n                    label.classList.add('connection-label');\n                    label.textContent = conn.label;\n                    this.connectionsGroup.appendChild(label);\n                }\n                \n                this.connectionsGroup.appendChild(connectionPath);\n            }\n        });\n    }\n\n    calculatePath(fromNode, toNode) {\n        const fromX = fromNode.position.x;\n        const fromY = fromNode.position.y;\n        const toX = toNode.position.x;\n        const toY = toNode.position.y;\n        \n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        \n        let startX = fromX;\n        let startY = fromY;\n        let endX = toX;\n        let endY = toY;\n        \n        if (Math.abs(dx) > Math.abs(dy)) {\n            startX += dx > 0 ? 35 : -35;\n            endX += dx > 0 ? -35 : 35;\n        } else {\n            startY += dy > 0 ? 35 : -35;\n            endY += dy > 0 ? -35 : 35;\n        }\n        \n        const controlX1 = startX + (endX - startX) * 0.5;\n        const controlY1 = startY;\n        const controlX2 = startX + (endX - startX) * 0.5;\n        const controlY2 = endY;\n        \n        return `M ${startX} ${startY} C ${controlX1} ${controlY1}, ${controlX2} ${controlY2}, ${endX} ${endY}`;\n    }\n\n    getPathMidpoint(fromNode, toNode) {\n        return {\n            x: (fromNode.position.x + toNode.position.x) / 2,\n            y: (fromNode.position.y + toNode.position.y) / 2\n        };\n    }\n\n    findNode(nodeId) {\n        for (const lane of this.processData.lanes) {\n            const node = lane.nodes.find(n => n.id === nodeId);\n            if (node) return node;\n        }\n        return null;\n    }\n\n    findLane(laneId) {\n        return this.processData.lanes.find(l => l.id === laneId);\n    }\n\n    getNodeColor(type) {\n        const colors = {\n            start: '#4caf50',\n            process: '#2196f3',\n            decision: '#ff9800',\n            end: '#f44336'\n        };\n        return colors[type] || '#2196f3';\n    }\n\n    fitToScreen() {\n        const bbox = this.svg.getBBox();\n        const viewBox = `${bbox.x - 20} ${bbox.y - 20} ${bbox.width + 40} ${bbox.height + 40}`;\n        this.svg.setAttribute('viewBox', viewBox);\n    }\n\n    zoom(factor) {\n        const viewBox = this.svg.getAttribute('viewBox') || '0 0 1440 800';\n        const [x, y, width, height] = viewBox.split(' ').map(Number);\n        \n        // Calculate the center point of the current view\n        const centerX = x + width / 2;\n        const centerY = y + height / 2;\n        \n        // Calculate new dimensions\n        const newWidth = width / factor;\n        const newHeight = height / factor;\n        \n        // Calculate new position to keep center point stable\n        const newX = centerX - newWidth / 2;\n        const newY = centerY - newHeight / 2;\n        \n        this.svg.setAttribute('viewBox', `${newX} ${newY} ${newWidth} ${newHeight}`);\n    }\n\n    pan(dx, dy) {\n        const viewBox = this.svg.getAttribute('viewBox') || '0 0 1440 800';\n        const [x, y, width, height] = viewBox.split(' ').map(Number);\n        \n        const newX = x - dx * (width / this.svg.clientWidth);\n        const newY = y - dy * (height / this.svg.clientHeight);\n        \n        this.svg.setAttribute('viewBox', `${newX} ${newY} ${width} ${height}`);\n    }\n\n    applyTransform() {\n        // This method is no longer needed as we're using viewBox directly\n        // Kept for backward compatibility\n    }\n\n    addLane(name) {\n        const newLane = {\n            id: `lane_${Date.now()}`,\n            name: name || `New Lane ${this.processData.lanes.length + 1}`,\n            color: this.generateLaneColor(this.processData.lanes.length),\n            nodes: [],\n            height: 140\n        };\n        \n        this.processData.lanes.push(newLane);\n        this.render(this.processData);\n        return newLane;\n    }\n\n    addNode(laneId, type = 'process', text = 'New Node') {\n        const lane = this.findLane(laneId);\n        if (!lane) return null;\n        \n        const newNode = {\n            id: `node_${Date.now()}`,\n            text: text,\n            type: type,\n            position: {\n                x: 150 + lane.nodes.length * 200,\n                y: lane.y + 70\n            },\n            color: this.getNodeColor(type),\n            icon: this.getNodeIcon(type)\n        };\n        \n        lane.nodes.push(newNode);\n        this.render(this.processData);\n        return newNode;\n    }\n\n    getNodeIcon(type) {\n        const icons = {\n            start: '🏁',\n            process: '🏊',\n            decision: '🤿',\n            end: '🏆'\n        };\n        return icons[type] || '🏊';\n    }\n\n    generateLaneColor(index) {\n        const colors = [\n            '#64b5f6',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1'\n        ];\n        return colors[index % colors.length];\n    }\n\n    updateNode(nodeId, updates) {\n        const node = this.findNode(nodeId);\n        if (node) {\n            Object.assign(node, updates);\n            this.render(this.processData);\n        }\n    }\n\n    deleteNode(nodeId) {\n        for (const lane of this.processData.lanes) {\n            const index = lane.nodes.findIndex(n => n.id === nodeId);\n            if (index !== -1) {\n                lane.nodes.splice(index, 1);\n                this.processData.connections = this.processData.connections.filter(\n                    conn => conn.from !== nodeId && conn.to !== nodeId\n                );\n                this.render(this.processData);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    deleteLane(laneId) {\n        const index = this.processData.lanes.findIndex(l => l.id === laneId);\n        if (index !== -1) {\n            const lane = this.processData.lanes[index];\n            const nodeIds = lane.nodes.map(n => n.id);\n            this.processData.connections = this.processData.connections.filter(\n                conn => !nodeIds.includes(conn.from) && !nodeIds.includes(conn.to)\n            );\n            this.processData.lanes.splice(index, 1);\n            this.render(this.processData);\n            return true;\n        }\n        return false;\n    }\n\n    addConnection(fromId, toId, label = '') {\n        const connection = {\n            from: fromId,\n            to: toId,\n            label: label\n        };\n        this.processData.connections.push(connection);\n        this.render(this.processData);\n        return connection;\n    }\n\n    getProcessData() {\n        return this.processData;\n    }\n}\n\nwindow.SwimLaneRenderer = SwimLaneRenderer;","export class ProcessExporter {\n    constructor() {\n        this.svgNamespace = 'http://www.w3.org/2000/svg';\n    }\n\n    exportToJSON(processData) {\n        const exportData = {\n            title: processData.title,\n            lanes: processData.lanes.map(lane => ({\n                id: lane.id,\n                name: lane.name,\n                color: lane.color,\n                height: lane.height,\n                nodes: lane.nodes.map(node => ({\n                    id: node.id,\n                    text: node.text,\n                    type: node.type,\n                    position: {\n                        x: node.position.x,\n                        y: node.position.y\n                    },\n                    color: node.color,\n                    metadata: node.metadata || {}\n                }))\n            })),\n            connections: processData.connections.map(conn => ({\n                from: conn.from,\n                to: conn.to,\n                label: conn.label || ''\n            })),\n            metadata: processData.metadata || {}\n        };\n\n        return JSON.stringify(exportData, null, 2);\n    }\n\n    downloadJSON(processData, filename = 'swimlane-process.json') {\n        const jsonString = this.exportToJSON(processData);\n        const blob = new Blob([jsonString], { type: 'application/json' });\n        this.downloadFile(blob, filename);\n    }\n\n    exportToImage(svgElement, format = 'png', filename = 'swimlane-diagram') {\n        const svgClone = svgElement.cloneNode(true);\n        \n        this.addStyleToSVG(svgClone);\n        \n        const svgString = new XMLSerializer().serializeToString(svgClone);\n        const svgBlob = new Blob([svgString], { type: 'image/svg+xml;charset=utf-8' });\n        \n        if (format === 'svg') {\n            this.downloadFile(svgBlob, `${filename}.svg`);\n        } else if (format === 'png') {\n            this.convertSVGToPNG(svgString, filename);\n        }\n    }\n\n    addStyleToSVG(svgElement) {\n        const style = document.createElementNS(this.svgNamespace, 'style');\n        style.textContent = `\n            .swimlane {\n                fill: url(#laneGradient);\n                stroke: #1976d2;\n                stroke-width: 2;\n                opacity: 0.8;\n            }\n            .lane-divider {\n                stroke: #ffc107;\n                stroke-width: 3;\n                stroke-dasharray: 10, 5;\n                opacity: 0.8;\n            }\n            .lane-label {\n                fill: #0d47a1;\n                font-size: 18px;\n                font-weight: bold;\n                text-anchor: middle;\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            }\n            .process-node {\n                cursor: move;\n            }\n            .node-start {\n                fill: #4caf50;\n                stroke: white;\n                stroke-width: 2;\n            }\n            .node-process {\n                fill: #2196f3;\n                stroke: white;\n                stroke-width: 2;\n            }\n            .node-decision {\n                fill: #ff9800;\n                stroke: white;\n                stroke-width: 2;\n            }\n            .node-end {\n                fill: #f44336;\n                stroke: white;\n                stroke-width: 2;\n            }\n            .node-text {\n                fill: white;\n                font-size: 14px;\n                text-anchor: middle;\n                font-weight: 500;\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            }\n            .connection-line {\n                stroke: #1565c0;\n                stroke-width: 2;\n                fill: none;\n            }\n            .connection-label {\n                fill: #0d47a1;\n                font-size: 12px;\n                text-anchor: middle;\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            }\n        `;\n        svgElement.insertBefore(style, svgElement.firstChild);\n    }\n\n    convertSVGToPNG(svgString, filename) {\n        const img = new Image();\n        const url = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgString);\n        \n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const scale = 2;\n            canvas.width = img.width * scale;\n            canvas.height = img.height * scale;\n            \n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.scale(scale, scale);\n            ctx.drawImage(img, 0, 0);\n            \n            canvas.toBlob(blob => {\n                this.downloadFile(blob, `${filename}.png`);\n            }, 'image/png');\n        };\n        \n        img.src = url;\n    }\n\n    downloadFile(blob, filename) {\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n    }\n\n    exportToPDF(svgElement, processData, filename = 'swimlane-diagram.pdf') {\n        alert('PDF export requires additional libraries. For now, please use PNG or SVG export and convert to PDF using external tools.');\n    }\n\n    exportToCSV(processData, filename = 'process-data.csv') {\n        const rows = [['Lane', 'Node ID', 'Node Text', 'Node Type', 'Position X', 'Position Y']];\n        \n        processData.lanes.forEach(lane => {\n            lane.nodes.forEach(node => {\n                rows.push([\n                    lane.name,\n                    node.id,\n                    node.text,\n                    node.type,\n                    node.position.x,\n                    node.position.y\n                ]);\n            });\n        });\n        \n        const csvContent = rows.map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n');\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        this.downloadFile(blob, filename);\n    }\n\n    copyToClipboard(processData) {\n        const jsonString = this.exportToJSON(processData);\n        \n        if (navigator.clipboard && navigator.clipboard.writeText) {\n            navigator.clipboard.writeText(jsonString).then(() => {\n                this.showNotification('Process data copied to clipboard!');\n            }).catch(err => {\n                console.error('Failed to copy to clipboard:', err);\n                this.fallbackCopyToClipboard(jsonString);\n            });\n        } else {\n            this.fallbackCopyToClipboard(jsonString);\n        }\n    }\n\n    fallbackCopyToClipboard(text) {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.top = '0';\n        textArea.style.left = '0';\n        textArea.style.opacity = '0';\n        \n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        \n        try {\n            const successful = document.execCommand('copy');\n            if (successful) {\n                this.showNotification('Process data copied to clipboard!');\n            } else {\n                this.showNotification('Failed to copy to clipboard', 'error');\n            }\n        } catch (err) {\n            console.error('Fallback copy failed:', err);\n            this.showNotification('Failed to copy to clipboard', 'error');\n        }\n        \n        document.body.removeChild(textArea);\n    }\n\n    showNotification(message, type = 'success') {\n        const notification = document.createElement('div');\n        notification.textContent = message;\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 15px 20px;\n            background: ${type === 'success' ? '#4caf50' : '#f44336'};\n            color: white;\n            border-radius: 5px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            z-index: 10000;\n            animation: slideIn 0.3s ease;\n        `;\n        \n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.style.animation = 'slideOut 0.3s ease';\n            setTimeout(() => {\n                document.body.removeChild(notification);\n            }, 300);\n        }, 3000);\n    }\n\n    generateShareableLink(processData) {\n        const jsonString = this.exportToJSON(processData);\n        const compressed = btoa(encodeURIComponent(jsonString));\n        const currentUrl = window.location.origin + window.location.pathname;\n        const shareUrl = `${currentUrl}?data=${compressed}`;\n        \n        if (shareUrl.length > 2000) {\n            this.showNotification('Process too large for URL sharing. Please use file export.', 'error');\n            return null;\n        }\n        \n        return shareUrl;\n    }\n}\n\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes slideIn {\n        from {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n        to {\n            transform: translateX(0);\n            opacity: 1;\n        }\n    }\n    \n    @keyframes slideOut {\n        from {\n            transform: translateX(0);\n            opacity: 1;\n        }\n        to {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n    }\n`;\ndocument.head.appendChild(style);\n\nwindow.ProcessExporter = ProcessExporter;","export class DiagramEditor {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.svg = renderer.svg;\n        this.isDragging = false;\n        this.draggedNode = null;\n        this.dragOffset = { x: 0, y: 0 };\n        this.isConnecting = false;\n        this.connectionStart = null;\n        this.connectionPreview = null;\n        this.history = [];\n        this.historyIndex = -1;\n        this.maxHistory = 50;\n        \n        this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n        this.svg.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        this.svg.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        this.svg.addEventListener('mouseup', this.handleMouseUp.bind(this));\n        this.svg.addEventListener('dblclick', this.handleDoubleClick.bind(this));\n        \n        document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n\n    getSVGPoint(e) {\n        const rect = this.svg.getBoundingClientRect();\n        const viewBox = this.svg.getAttribute('viewBox');\n        \n        if (viewBox) {\n            const [vx, vy, vw, vh] = viewBox.split(' ').map(Number);\n            const scaleX = vw / rect.width;\n            const scaleY = vh / rect.height;\n            \n            return {\n                x: vx + (e.clientX - rect.left) * scaleX,\n                y: vy + (e.clientY - rect.top) * scaleY\n            };\n        } else {\n            const point = this.svg.createSVGPoint();\n            point.x = e.clientX - rect.left;\n            point.y = e.clientY - rect.top;\n            const svgPoint = point.matrixTransform(this.svg.getScreenCTM().inverse());\n            return { x: svgPoint.x, y: svgPoint.y };\n        }\n    }\n\n    handleMouseDown(e) {\n        const target = e.target.closest('.process-node');\n        if (target && !this.isConnecting) {\n            this.startDragging(e, target);\n        } else if (target && this.isConnecting) {\n            this.completeConnection(target.getAttribute('data-node-id'));\n        }\n        \n        const resizeHandle = e.target.closest('.resize-handle');\n        if (resizeHandle) {\n            this.startResizing(e, resizeHandle);\n        }\n    }\n\n    handleMouseMove(e) {\n        if (this.isDragging && this.draggedNode) {\n            this.dragNode(e);\n        } else if (this.isConnecting && this.connectionPreview) {\n            this.updateConnectionPreview(e);\n        } else if (this.isResizing) {\n            this.resizeLane(e);\n        }\n    }\n\n    handleMouseUp(e) {\n        if (this.isDragging) {\n            this.stopDragging();\n        } else if (this.isResizing) {\n            this.stopResizing();\n        }\n    }\n\n    handleDoubleClick(e) {\n        const nodeElement = e.target.closest('.process-node');\n        if (nodeElement) {\n            const nodeId = nodeElement.getAttribute('data-node-id');\n            this.editNode(nodeId);\n        }\n        \n        const laneElement = e.target.closest('.swimlane');\n        if (laneElement && !nodeElement) {\n            const laneId = laneElement.parentElement.getAttribute('data-lane-id');\n            this.editLane(laneId);\n        }\n    }\n\n    handleKeyDown(e) {\n        if (e.ctrlKey || e.metaKey) {\n            switch(e.key) {\n                case 'z':\n                    e.preventDefault();\n                    this.undo();\n                    break;\n                case 'y':\n                    e.preventDefault();\n                    this.redo();\n                    break;\n                case 's':\n                    e.preventDefault();\n                    this.save();\n                    break;\n            }\n        }\n        \n        if (e.key === 'Delete' && this.renderer.selectedNode) {\n            this.deleteSelectedNode();\n        }\n    }\n\n    startDragging(e, nodeElement) {\n        this.saveState();\n        this.isDragging = true;\n        this.draggedNode = nodeElement;\n        const nodeId = nodeElement.getAttribute('data-node-id');\n        const node = this.renderer.findNode(nodeId);\n        \n        const svgPoint = this.getSVGPoint(e);\n        \n        this.dragOffset = {\n            x: svgPoint.x - node.position.x,\n            y: svgPoint.y - node.position.y\n        };\n        \n        nodeElement.classList.add('node-dragging');\n    }\n\n    dragNode(e) {\n        if (!this.draggedNode) return;\n        \n        const nodeId = this.draggedNode.getAttribute('data-node-id');\n        const node = this.renderer.findNode(nodeId);\n        \n        const svgPoint = this.getSVGPoint(e);\n        \n        node.position.x = svgPoint.x - this.dragOffset.x;\n        node.position.y = svgPoint.y - this.dragOffset.y;\n        \n        const laneId = this.getLaneAtPosition(node.position.y);\n        if (laneId && laneId !== this.draggedNode.getAttribute('data-lane-id')) {\n            this.moveNodeToLane(nodeId, laneId);\n        }\n        \n        this.renderer.render(this.renderer.processData);\n        \n        const newDraggedNode = this.svg.querySelector(`[data-node-id=\"${nodeId}\"]`);\n        if (newDraggedNode) {\n            newDraggedNode.classList.add('node-dragging');\n            this.draggedNode = newDraggedNode;\n        }\n    }\n\n    stopDragging() {\n        if (this.draggedNode) {\n            this.draggedNode.classList.remove('node-dragging');\n        }\n        this.isDragging = false;\n        this.draggedNode = null;\n        this.dragOffset = { x: 0, y: 0 };\n    }\n\n    getLaneAtPosition(y) {\n        for (const lane of this.renderer.processData.lanes) {\n            if (y >= lane.y && y <= lane.y + (lane.height || 140)) {\n                return lane.id;\n            }\n        }\n        return null;\n    }\n\n    moveNodeToLane(nodeId, newLaneId) {\n        const processData = this.renderer.processData;\n        let node = null;\n        let oldLaneId = null;\n        \n        for (const lane of processData.lanes) {\n            const nodeIndex = lane.nodes.findIndex(n => n.id === nodeId);\n            if (nodeIndex !== -1) {\n                node = lane.nodes[nodeIndex];\n                oldLaneId = lane.id;\n                lane.nodes.splice(nodeIndex, 1);\n                break;\n            }\n        }\n        \n        if (node) {\n            const newLane = processData.lanes.find(l => l.id === newLaneId);\n            if (newLane) {\n                newLane.nodes.push(node);\n            }\n        }\n    }\n\n    startConnecting(fromNodeId) {\n        this.isConnecting = true;\n        this.connectionStart = fromNodeId;\n        \n        const fromNode = this.renderer.findNode(fromNodeId);\n        if (fromNode) {\n            this.connectionPreview = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            this.connectionPreview.classList.add('connection-preview');\n            this.connectionPreview.setAttribute('x1', fromNode.position.x);\n            this.connectionPreview.setAttribute('y1', fromNode.position.y);\n            this.connectionPreview.setAttribute('x2', fromNode.position.x);\n            this.connectionPreview.setAttribute('y2', fromNode.position.y);\n            this.renderer.connectionsGroup.appendChild(this.connectionPreview);\n        }\n    }\n\n    updateConnectionPreview(e) {\n        if (!this.connectionPreview) return;\n        \n        const rect = this.svg.getBoundingClientRect();\n        const viewBox = this.svg.getAttribute('viewBox');\n        \n        if (viewBox) {\n            const [vx, vy, vw, vh] = viewBox.split(' ').map(Number);\n            const scaleX = vw / rect.width;\n            const scaleY = vh / rect.height;\n            \n            const x = vx + (e.clientX - rect.left) * scaleX;\n            const y = vy + (e.clientY - rect.top) * scaleY;\n            \n            this.connectionPreview.setAttribute('x2', x);\n            this.connectionPreview.setAttribute('y2', y);\n        } else {\n            const point = this.svg.createSVGPoint();\n            point.x = e.clientX - rect.left;\n            point.y = e.clientY - rect.top;\n            \n            const svgPoint = point.matrixTransform(this.svg.getScreenCTM().inverse());\n            \n            this.connectionPreview.setAttribute('x2', svgPoint.x);\n            this.connectionPreview.setAttribute('y2', svgPoint.y);\n        }\n    }\n\n    completeConnection(toNodeId) {\n        if (this.connectionStart && toNodeId && this.connectionStart !== toNodeId) {\n            this.saveState();\n            const label = prompt('Enter connection label (optional):');\n            this.renderer.addConnection(this.connectionStart, toNodeId, label || '');\n        }\n        \n        this.cancelConnection();\n    }\n\n    cancelConnection() {\n        this.isConnecting = false;\n        this.connectionStart = null;\n        if (this.connectionPreview) {\n            this.connectionPreview.remove();\n            this.connectionPreview = null;\n        }\n    }\n\n    editNode(nodeId) {\n        const node = this.renderer.findNode(nodeId);\n        if (!node) return;\n        \n        const modal = document.getElementById('nodeModal');\n        const nodeText = document.getElementById('nodeText');\n        const nodeType = document.getElementById('nodeType');\n        const nodeColor = document.getElementById('nodeColor');\n        \n        nodeText.value = node.text;\n        nodeType.value = node.type;\n        nodeColor.value = node.color || this.renderer.getNodeColor(node.type);\n        \n        modal.style.display = 'flex';\n        this.renderer.selectedNode = nodeId;\n        \n        const saveBtn = document.getElementById('saveNodeBtn');\n        const deleteBtn = document.getElementById('deleteNodeBtn');\n        const cancelBtn = document.getElementById('cancelNodeBtn');\n        const closeBtn = modal.querySelector('.close-btn');\n        \n        const saveHandler = () => {\n            this.saveState();\n            this.renderer.updateNode(nodeId, {\n                text: nodeText.value,\n                type: nodeType.value,\n                color: nodeColor.value,\n                icon: this.renderer.getNodeIcon(nodeType.value)\n            });\n            modal.style.display = 'none';\n            this.cleanup();\n        };\n        \n        const deleteHandler = () => {\n            if (confirm('Are you sure you want to delete this node?')) {\n                this.saveState();\n                this.renderer.deleteNode(nodeId);\n                modal.style.display = 'none';\n                this.cleanup();\n            }\n        };\n        \n        const cancelHandler = () => {\n            modal.style.display = 'none';\n            this.cleanup();\n        };\n        \n        const cleanup = () => {\n            saveBtn.removeEventListener('click', saveHandler);\n            deleteBtn.removeEventListener('click', deleteHandler);\n            cancelBtn.removeEventListener('click', cancelHandler);\n            closeBtn.removeEventListener('click', cancelHandler);\n            this.renderer.selectedNode = null;\n        };\n        \n        this.cleanup = cleanup;\n        \n        saveBtn.addEventListener('click', saveHandler);\n        deleteBtn.addEventListener('click', deleteHandler);\n        cancelBtn.addEventListener('click', cancelHandler);\n        closeBtn.addEventListener('click', cancelHandler);\n    }\n\n    editLane(laneId) {\n        const lane = this.renderer.findLane(laneId);\n        if (!lane) return;\n        \n        const modal = document.getElementById('laneModal');\n        const laneName = document.getElementById('laneName');\n        const laneColor = document.getElementById('laneColor');\n        \n        laneName.value = lane.name;\n        laneColor.value = lane.color;\n        \n        modal.style.display = 'flex';\n        this.renderer.selectedLane = laneId;\n        \n        const saveBtn = document.getElementById('saveLaneBtn');\n        const deleteBtn = document.getElementById('deleteLaneBtn');\n        const cancelBtn = document.getElementById('cancelLaneBtn');\n        const closeBtn = modal.querySelector('.close-btn');\n        \n        const saveHandler = () => {\n            this.saveState();\n            lane.name = laneName.value;\n            lane.color = laneColor.value;\n            this.renderer.render(this.renderer.processData);\n            modal.style.display = 'none';\n            this.cleanup();\n        };\n        \n        const deleteHandler = () => {\n            if (confirm('Are you sure you want to delete this lane and all its nodes?')) {\n                this.saveState();\n                this.renderer.deleteLane(laneId);\n                modal.style.display = 'none';\n                this.cleanup();\n            }\n        };\n        \n        const cancelHandler = () => {\n            modal.style.display = 'none';\n            this.cleanup();\n        };\n        \n        const cleanup = () => {\n            saveBtn.removeEventListener('click', saveHandler);\n            deleteBtn.removeEventListener('click', deleteHandler);\n            cancelBtn.removeEventListener('click', cancelHandler);\n            closeBtn.removeEventListener('click', cancelHandler);\n            this.renderer.selectedLane = null;\n        };\n        \n        this.cleanup = cleanup;\n        \n        saveBtn.addEventListener('click', saveHandler);\n        deleteBtn.addEventListener('click', deleteHandler);\n        cancelBtn.addEventListener('click', cancelHandler);\n        closeBtn.addEventListener('click', cancelHandler);\n    }\n\n    startResizing(e, handle) {\n        this.isResizing = true;\n        this.resizingLane = handle.getAttribute('data-lane-id');\n        this.resizeStartX = e.clientX;\n        this.resizeStartHeight = this.renderer.findLane(this.resizingLane).height || 140;\n    }\n\n    resizeLane(e) {\n        if (!this.isResizing) return;\n        \n        const lane = this.renderer.findLane(this.resizingLane);\n        if (lane) {\n            const diff = e.clientX - this.resizeStartX;\n            lane.height = Math.max(100, this.resizeStartHeight + diff);\n            this.renderer.render(this.renderer.processData);\n        }\n    }\n\n    stopResizing() {\n        this.isResizing = false;\n        this.resizingLane = null;\n    }\n\n    saveState() {\n        const state = JSON.stringify(this.renderer.processData);\n        \n        if (this.historyIndex < this.history.length - 1) {\n            this.history = this.history.slice(0, this.historyIndex + 1);\n        }\n        \n        this.history.push(state);\n        \n        if (this.history.length > this.maxHistory) {\n            this.history.shift();\n        } else {\n            this.historyIndex++;\n        }\n    }\n\n    undo() {\n        if (this.historyIndex > 0) {\n            this.historyIndex--;\n            const state = JSON.parse(this.history[this.historyIndex]);\n            this.renderer.render(state);\n        }\n    }\n\n    redo() {\n        if (this.historyIndex < this.history.length - 1) {\n            this.historyIndex++;\n            const state = JSON.parse(this.history[this.historyIndex]);\n            this.renderer.render(state);\n        }\n    }\n\n    save() {\n        const event = new CustomEvent('save', { detail: this.renderer.processData });\n        document.dispatchEvent(event);\n    }\n\n    deleteSelectedNode() {\n        if (this.renderer.selectedNode) {\n            this.saveState();\n            this.renderer.deleteNode(this.renderer.selectedNode);\n            this.renderer.selectedNode = null;\n        }\n    }\n}\n\nwindow.DiagramEditor = DiagramEditor;","export class DiagramControls {\n    constructor(renderer, editor, parser, exporter) {\n        this.renderer = renderer;\n        this.editor = editor;\n        this.parser = parser;\n        this.exporter = exporter;\n        this.connectMode = false;\n        \n        this.setupControls();\n        this.setupDragAndDrop();\n    }\n\n    setupControls() {\n        document.getElementById('uploadBtn').addEventListener('click', () => {\n            document.getElementById('fileInput').click();\n        });\n\n        document.getElementById('fileInput').addEventListener('change', (e) => {\n            this.handleFileUpload(e.target.files[0]);\n        });\n\n        document.getElementById('loadSampleBtn').addEventListener('click', () => {\n            this.loadSampleData();\n        });\n\n        document.getElementById('addLaneBtn').addEventListener('click', () => {\n            this.addNewLane();\n        });\n\n        document.getElementById('addNodeBtn').addEventListener('click', () => {\n            this.addNewNode();\n        });\n\n        document.getElementById('connectBtn').addEventListener('click', () => {\n            this.toggleConnectMode();\n        });\n\n        document.getElementById('zoomInBtn').addEventListener('click', () => {\n            this.renderer.zoom(1.2);\n        });\n\n        document.getElementById('zoomOutBtn').addEventListener('click', () => {\n            this.renderer.zoom(0.8);\n        });\n\n        document.getElementById('fitBtn').addEventListener('click', () => {\n            this.renderer.fitToScreen();\n        });\n\n        document.getElementById('undoBtn').addEventListener('click', () => {\n            this.editor.undo();\n        });\n\n        document.getElementById('redoBtn').addEventListener('click', () => {\n            this.editor.redo();\n        });\n\n        document.getElementById('downloadJsonBtn').addEventListener('click', () => {\n            this.downloadJSON();\n        });\n\n        document.getElementById('downloadImageBtn').addEventListener('click', () => {\n            this.downloadImage();\n        });\n\n        document.addEventListener('save', (e) => {\n            this.exporter.downloadJSON(e.detail);\n        });\n    }\n\n    setupDragAndDrop() {\n        const dropZone = document.getElementById('dropZone');\n        const swimlaneCanvas = document.getElementById('swimlaneCanvas');\n\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            dropZone.addEventListener(eventName, this.preventDefaults, false);\n            document.body.addEventListener(eventName, this.preventDefaults, false);\n        });\n\n        ['dragenter', 'dragover'].forEach(eventName => {\n            dropZone.addEventListener(eventName, () => {\n                dropZone.classList.add('drag-over');\n            }, false);\n        });\n\n        ['dragleave', 'drop'].forEach(eventName => {\n            dropZone.addEventListener(eventName, () => {\n                dropZone.classList.remove('drag-over');\n            }, false);\n        });\n\n        dropZone.addEventListener('drop', (e) => {\n            const files = e.dataTransfer.files;\n            if (files.length > 0) {\n                this.handleFileUpload(files[0]);\n            }\n        }, false);\n\n        dropZone.addEventListener('click', () => {\n            document.getElementById('fileInput').click();\n        });\n    }\n\n    preventDefaults(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    async handleFileUpload(file) {\n        if (!file || !file.name.endsWith('.json')) {\n            alert('Please upload a valid JSON file');\n            return;\n        }\n\n        try {\n            const processData = await this.parser.loadFromFile(file);\n            this.displayDiagram(processData);\n            this.showNotification('Process loaded successfully!');\n        } catch (error) {\n            alert('Error loading file: ' + error.message);\n        }\n    }\n\n    loadSampleData() {\n        const sampleData = this.parser.generateSampleProcess();\n        this.displayDiagram(sampleData);\n        this.showNotification('Sample process loaded!');\n    }\n\n    displayDiagram(processData) {\n        document.getElementById('dropZone').style.display = 'none';\n        document.getElementById('swimlaneCanvas').style.display = 'block';\n        \n        this.renderer.render(processData);\n        this.editor.saveState();\n    }\n\n    addNewLane() {\n        const name = prompt('Enter lane name:');\n        if (name) {\n            this.editor.saveState();\n            const lane = this.renderer.addLane(name);\n            this.showNotification(`Lane \"${name}\" added!`);\n        }\n    }\n\n    addNewNode() {\n        if (!this.renderer.processData || this.renderer.processData.lanes.length === 0) {\n            alert('Please add a lane first or load a process');\n            return;\n        }\n\n        const lanes = this.renderer.processData.lanes;\n        const laneOptions = lanes.map(l => `${l.name}`).join('\\n');\n        const laneIndex = prompt(`Select lane (enter number):\\n${lanes.map((l, i) => `${i + 1}. ${l.name}`).join('\\n')}`);\n        \n        if (laneIndex && !isNaN(laneIndex)) {\n            const selectedLane = lanes[parseInt(laneIndex) - 1];\n            if (selectedLane) {\n                const nodeText = prompt('Enter node text:') || 'New Node';\n                const nodeType = prompt('Enter node type (start/process/decision/end):') || 'process';\n                \n                this.editor.saveState();\n                const node = this.renderer.addNode(selectedLane.id, nodeType, nodeText);\n                this.showNotification('Node added!');\n            }\n        }\n    }\n\n    toggleConnectMode() {\n        this.connectMode = !this.connectMode;\n        const connectBtn = document.getElementById('connectBtn');\n        \n        if (this.connectMode) {\n            connectBtn.style.background = 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)';\n            this.showNotification('Connection mode ON - Click nodes to connect them');\n            this.setupConnectionMode();\n        } else {\n            connectBtn.style.background = '';\n            this.showNotification('Connection mode OFF');\n            this.teardownConnectionMode();\n        }\n    }\n\n    setupConnectionMode() {\n        this.connectionHandler = (e) => {\n            const nodeElement = e.target.closest('.process-node');\n            if (nodeElement) {\n                const nodeId = nodeElement.getAttribute('data-node-id');\n                \n                if (!this.editor.connectionStart) {\n                    this.editor.startConnecting(nodeId);\n                    this.showNotification('Select target node');\n                } else {\n                    this.editor.completeConnection(nodeId);\n                    this.toggleConnectMode();\n                }\n            }\n        };\n        \n        this.renderer.svg.addEventListener('click', this.connectionHandler);\n    }\n\n    teardownConnectionMode() {\n        if (this.connectionHandler) {\n            this.renderer.svg.removeEventListener('click', this.connectionHandler);\n            this.connectionHandler = null;\n        }\n        this.editor.cancelConnection();\n    }\n\n    downloadJSON() {\n        const processData = this.renderer.getProcessData();\n        if (processData) {\n            const filename = prompt('Enter filename:', 'swimlane-process.json') || 'swimlane-process.json';\n            this.exporter.downloadJSON(processData, filename);\n            this.showNotification('JSON downloaded!');\n        } else {\n            alert('No diagram to export');\n        }\n    }\n\n    downloadImage() {\n        const processData = this.renderer.getProcessData();\n        if (!processData) {\n            alert('No diagram to export');\n            return;\n        }\n\n        const format = prompt('Enter format (png/svg):', 'png') || 'png';\n        const filename = prompt('Enter filename:', 'swimlane-diagram') || 'swimlane-diagram';\n        \n        this.exporter.exportToImage(this.renderer.svg, format, filename);\n        this.showNotification(`${format.toUpperCase()} downloaded!`);\n    }\n\n    showNotification(message, type = 'success') {\n        const notification = document.createElement('div');\n        notification.textContent = message;\n        notification.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            padding: 15px 20px;\n            background: ${type === 'success' ? 'linear-gradient(135deg, #4caf50, #45a049)' : 'linear-gradient(135deg, #f44336, #da190b)'};\n            color: white;\n            border-radius: 25px;\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n            z-index: 10000;\n            animation: notificationSlide 0.3s ease;\n            font-weight: 500;\n        `;\n        \n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.style.animation = 'notificationFade 0.3s ease';\n            setTimeout(() => {\n                document.body.removeChild(notification);\n            }, 300);\n        }, 3000);\n    }\n}\n\nconst notificationStyle = document.createElement('style');\nnotificationStyle.textContent = `\n    @keyframes notificationSlide {\n        from {\n            transform: translateY(100%);\n            opacity: 0;\n        }\n        to {\n            transform: translateY(0);\n            opacity: 1;\n        }\n    }\n    \n    @keyframes notificationFade {\n        from {\n            opacity: 1;\n        }\n        to {\n            opacity: 0;\n        }\n    }\n`;\ndocument.head.appendChild(notificationStyle);\n\nwindow.DiagramControls = DiagramControls;","export class KeyboardManager {\n    constructor(app) {\n        this.app = app;\n    }\n\n    setupKeyboardShortcuts() {\n        document.addEventListener('keydown', (e) => {\n            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {\n                return;\n            }\n\n            if (e.ctrlKey || e.metaKey) {\n                this.handleCtrlShortcuts(e);\n            } else {\n                this.handleRegularShortcuts(e);\n            }\n        });\n    }\n\n    handleCtrlShortcuts(e) {\n        switch(e.key.toLowerCase()) {\n            case 'o':\n                e.preventDefault();\n                document.getElementById('fileInput')?.click();\n                break;\n            case 's':\n                e.preventDefault();\n                this.app.controls.downloadJSON();\n                break;\n            case 'e':\n                e.preventDefault();\n                this.app.controls.downloadImage();\n                break;\n            case 'l':\n                e.preventDefault();\n                this.app.controls.addNewLane();\n                break;\n            case 'n':\n                e.preventDefault();\n                this.app.controls.addNewNode();\n                break;\n            case '+':\n            case '=':\n                e.preventDefault();\n                this.app.renderer.zoom(1.2);\n                break;\n            case '-':\n            case '_':\n                e.preventDefault();\n                this.app.renderer.zoom(0.8);\n                break;\n            case '0':\n                e.preventDefault();\n                this.app.renderer.fitToScreen();\n                break;\n        }\n    }\n\n    handleRegularShortcuts(e) {\n        switch(e.key.toLowerCase()) {\n            case 'c':\n                if (!e.target.closest('input, textarea')) {\n                    this.app.controls.toggleConnectMode();\n                }\n                break;\n            case 'h':\n                this.showHelp();\n                break;\n            case 'escape':\n                this.app.editor.cancelConnection();\n                if (this.app.controls.connectMode) {\n                    this.app.controls.toggleConnectMode();\n                }\n                break;\n        }\n    }\n\n    showHelp() {\n        const helpText = `\n🏊 Swim Lane Diagram - Keyboard Shortcuts\n\nFile Operations:\n• Ctrl+O: Open file\n• Ctrl+S: Save as JSON\n• Ctrl+E: Export as image\n\nEditing:\n• Ctrl+L: Add new lane\n• Ctrl+N: Add new node\n• C: Toggle connection mode\n• Delete: Delete selected node\n• Ctrl+Z: Undo\n• Ctrl+Y: Redo\n\nView:\n• Ctrl+Plus: Zoom in\n• Ctrl+Minus: Zoom out\n• Ctrl+0: Fit to screen\n\nOther:\n• H: Show this help\n• Escape: Cancel current operation\n• Double-click node: Edit node\n• Double-click lane: Edit lane\n• Drag nodes to move them\n        `;\n        \n        alert(helpText);\n    }\n}","export class UrlParamsHandler {\n    constructor(app) {\n        this.app = app;\n    }\n\n    checkUrlParams() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const data = urlParams.get('data');\n        \n        if (data) {\n            this.loadSharedDiagram(data);\n        }\n    }\n\n    loadSharedDiagram(data) {\n        try {\n            const jsonString = decodeURIComponent(atob(data));\n            const jsonData = JSON.parse(jsonString);\n            const processData = this.app.parser.parseProcess(jsonData);\n            this.app.controls.displayDiagram(processData);\n        } catch (error) {\n            console.error('Failed to load shared diagram:', error);\n            this.showErrorMessage('Failed to load shared diagram. The link may be corrupted.');\n        }\n    }\n\n    createShareableUrl(jsonData) {\n        const jsonString = JSON.stringify(jsonData);\n        const encodedData = btoa(encodeURIComponent(jsonString));\n        const baseUrl = window.location.origin + window.location.pathname;\n        return `${baseUrl}?data=${encodedData}`;\n    }\n\n    showErrorMessage(message) {\n        // This could be enhanced with a better UI notification system\n        console.error(message);\n        alert(message);\n    }\n}","import { ProcessParser } from './core/utils/parser.js';\nimport { SwimLaneRenderer } from './components/diagram/SwimLane.js';\nimport { ProcessExporter } from './lib/export/exporter.js';\nimport { DiagramEditor } from './components/editor/Editor.js';\nimport { DiagramControls } from './components/controls/Controls.js';\nimport { KeyboardManager } from './core/services/KeyboardManager.js';\nimport { UrlParamsHandler } from './core/services/UrlParamsHandler.js';\nimport './styles/base/main.css';\n\nclass SwimLaneApp {\n    constructor() {\n        this.svg = document.getElementById('diagramSvg');\n        this.parser = new ProcessParser();\n        this.renderer = new SwimLaneRenderer(this.svg);\n        this.exporter = new ProcessExporter();\n        this.editor = new DiagramEditor(this.renderer);\n        this.controls = new DiagramControls(this.renderer, this.editor, this.parser, this.exporter);\n        \n        this.keyboardManager = new KeyboardManager(this);\n        this.urlParamsHandler = new UrlParamsHandler(this);\n        \n        this.init();\n    }\n\n    init() {\n        this.urlParamsHandler.checkUrlParams();\n        this.keyboardManager.setupKeyboardShortcuts();\n        console.log('🏊 Swim Lane Diagram Visualizer initialized!');\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const app = new SwimLaneApp();\n    window.swimLaneApp = app;\n});\n\nexport default SwimLaneApp;"],"names":["ProcessParser","constructor","this","defaultNodeTypes","nodeIcons","start","process","decision","end","validateJSON","jsonData","errors","lanes","Array","isArray","forEach","lane","index","id","push","name","nodes","node","nodeIndex","text","connections","conn","from","to","valid","length","parseProcess","validation","Error","join","title","metadata","laneIndex","parsedLane","color","generateLaneColor","position","y","height","parseNode","defaultPosition","x","type","getNodeColor","icon","colors","loadFromFile","file","Promise","resolve","reject","reader","FileReader","onload","e","JSON","parse","target","result","processData","error","message","onerror","readAsText","generateSampleProcess","label","window","SwimLaneRenderer","svgElement","svg","swimlanesGroup","querySelector","nodesGroup","connectionsGroup","scale","translateX","translateY","selectedNode","selectedLane","setupArrowMarker","defs","marker","document","createElementNS","setAttribute","polygon","appendChild","createLaneRope","laneGroup","yPosition","ropeGroup","float","classList","add","ropeLine","addDepthMarkers","positions","depth","textContent","render","clear","renderSwimLanes","renderNodes","renderConnections","fitToScreen","innerHTML","currentY","poolEdge","style","fill","waterRect","opacity","laneRect","stroke","filter","startBlock","blockNumber","laneLabel","resizeHandle","poolEdgeBottom","nodeGroup","nodeShape","cursor","points","strokeWidth","nodeIcon","fontSize","nodeText","fromNode","findNode","toNode","path","calculatePath","connectionPath","midPoint","getPathMidpoint","fromX","fromY","toX","toY","dx","dy","startX","startY","endX","endY","Math","abs","nodeId","find","n","findLane","laneId","l","bbox","getBBox","viewBox","width","zoom","factor","getAttribute","split","map","Number","newWidth","newHeight","newX","newY","pan","clientWidth","clientHeight","applyTransform","addLane","newLane","Date","now","addNode","newNode","getNodeIcon","updateNode","updates","Object","assign","deleteNode","findIndex","splice","deleteLane","nodeIds","includes","addConnection","fromId","toId","connection","getProcessData","ProcessExporter","svgNamespace","exportToJSON","exportData","stringify","downloadJSON","filename","jsonString","blob","Blob","downloadFile","exportToImage","format","svgClone","cloneNode","addStyleToSVG","svgString","XMLSerializer","serializeToString","svgBlob","convertSVGToPNG","insertBefore","firstChild","img","Image","url","encodeURIComponent","canvas","createElement","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","src","URL","createObjectURL","link","href","download","body","click","removeChild","revokeObjectURL","exportToPDF","alert","exportToCSV","rows","csvContent","row","cell","copyToClipboard","navigator","clipboard","writeText","then","showNotification","catch","err","fallbackCopyToClipboard","textArea","value","top","left","focus","select","execCommand","notification","cssText","setTimeout","animation","generateShareableLink","compressed","btoa","shareUrl","location","origin","pathname","head","DiagramEditor","renderer","isDragging","draggedNode","dragOffset","isConnecting","connectionStart","connectionPreview","history","historyIndex","maxHistory","setupEventListeners","addEventListener","handleMouseDown","bind","handleMouseMove","handleMouseUp","handleDoubleClick","handleKeyDown","getSVGPoint","rect","getBoundingClientRect","vx","vy","vw","vh","scaleX","scaleY","clientX","clientY","point","createSVGPoint","svgPoint","matrixTransform","getScreenCTM","inverse","closest","startDragging","completeConnection","startResizing","dragNode","updateConnectionPreview","isResizing","resizeLane","stopDragging","stopResizing","nodeElement","editNode","laneElement","parentElement","editLane","ctrlKey","metaKey","key","preventDefault","undo","redo","save","deleteSelectedNode","saveState","getLaneAtPosition","moveNodeToLane","newDraggedNode","remove","newLaneId","startConnecting","fromNodeId","toNodeId","prompt","cancelConnection","modal","getElementById","nodeType","nodeColor","display","saveBtn","deleteBtn","cancelBtn","closeBtn","saveHandler","cleanup","deleteHandler","confirm","cancelHandler","removeEventListener","laneName","laneColor","handle","resizingLane","resizeStartX","resizeStartHeight","diff","max","state","slice","shift","event","CustomEvent","detail","dispatchEvent","DiagramControls","editor","parser","exporter","connectMode","setupControls","setupDragAndDrop","handleFileUpload","files","loadSampleData","addNewLane","addNewNode","toggleConnectMode","downloadImage","dropZone","eventName","preventDefaults","dataTransfer","stopPropagation","endsWith","displayDiagram","sampleData","i","isNaN","parseInt","connectBtn","background","setupConnectionMode","teardownConnectionMode","connectionHandler","toUpperCase","notificationStyle","KeyboardManager","app","setupKeyboardShortcuts","tagName","handleCtrlShortcuts","handleRegularShortcuts","toLowerCase","controls","showHelp","UrlParamsHandler","checkUrlParams","data","URLSearchParams","search","get","loadSharedDiagram","decodeURIComponent","atob","showErrorMessage","createShareableUrl","encodedData","SwimLaneApp","keyboardManager","urlParamsHandler","init","swimLaneApp"],"mappings":"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"}